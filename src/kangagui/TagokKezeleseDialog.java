/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kangagui;

import pojos.Tag;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Session;

/**
 *
 * @author Droti
 */
public class TagokKezeleseDialog extends javax.swing.JDialog {

    private java.awt.Frame parent;
    private List<Tag> tagok;
    private DefaultTableModel dtm;
    

    public TagokKezeleseDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Tagok kezelése");
        setLocationRelativeTo(parent);

        this.parent = parent;

        dtm = (DefaultTableModel) tblTagok.getModel();

        tablaFrissit();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblTagok = new javax.swing.JTable();
        btnUjTag = new javax.swing.JButton();
        btnTorles = new javax.swing.JButton();
        btnKilepes = new javax.swing.JButton();
        btModosit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblTagok.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Név", "E-mail", "Telefonszám"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTagok);

        btnUjTag.setText("Új tag");
        btnUjTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUjTagActionPerformed(evt);
            }
        });

        btnTorles.setText("Törlés");
        btnTorles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTorlesActionPerformed(evt);
            }
        });

        btnKilepes.setText("Kilépés");
        btnKilepes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKilepesActionPerformed(evt);
            }
        });

        btModosit.setText("Módosít");
        btModosit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btModositActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUjTag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTorles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnKilepes, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                    .addComponent(btModosit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btnUjTag)
                .addGap(27, 27, 27)
                .addComponent(btnTorles)
                .addGap(29, 29, 29)
                .addComponent(btModosit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnKilepes)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUjTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUjTagActionPerformed
        TagAdatokDialog tad = new TagAdatokDialog(parent, true, null);
        tad.setVisible(true);

        if (tad.isMentes()) {
            Session session = hibernate.HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            session.save(tad.getTag());
            session.getTransaction().commit();
            session.close();

        }

        tablaFrissit();
    }//GEN-LAST:event_btnUjTagActionPerformed

    private void btnTorlesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTorlesActionPerformed
        int sorIndex = tblTagok.getSelectedRow();

        if (sorIndex == -1) { //figyelmeztetés, hogy nincs kiválasztva
            JOptionPane.showMessageDialog(rootPane, "Nincsen kiválasztva személy", "Figyelmeztetés", JOptionPane.WARNING_MESSAGE);
        } else {
            int valasz = JOptionPane.showConfirmDialog(rootPane, "Biztosan törölni szeretné a kiválasztott személyt?", "Törlési megerősítés",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

            if (valasz == JOptionPane.YES_OPTION) {

                Tag selected = tagok.get(sorIndex);
                
                if (!selected.getHordozos().isEmpty()){
                     JOptionPane.showMessageDialog(parent, "Nem törölhető a tag, mert kölcsönzött eszköz van nála", "Figyelmeztetés", JOptionPane.WARNING_MESSAGE);
                } else{
                Session session = hibernate.HibernateUtil.getSessionFactory().openSession();
                session.beginTransaction();
                session.delete(selected);
                session.getTransaction().commit();
                session.close();
                }

                tablaFrissit();

            }
        }
    }//GEN-LAST:event_btnTorlesActionPerformed

    private void btModositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btModositActionPerformed
        int sorIndex = tblTagok.getSelectedRow();

        if (sorIndex == -1) { //figyelmeztetés, hogy nincs kiválasztva
            JOptionPane.showMessageDialog(rootPane, "Nincsen kiválasztva személy", "Figyelmeztetés", JOptionPane.WARNING_MESSAGE);
        } else {
            Tag selected = tagok.get(sorIndex);

            TagAdatokDialog tad = new TagAdatokDialog(parent, true, selected);
            tad.setVisible(true);

            if (tad.isMentes()) {

                Session session = hibernate.HibernateUtil.getSessionFactory().openSession();
                session.beginTransaction();
                session.update(tad.getTag());
                session.getTransaction().commit();
                session.close();

                tablaFrissit();

            }

        }
    }//GEN-LAST:event_btModositActionPerformed

    private void btnKilepesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKilepesActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnKilepesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btModosit;
    private javax.swing.JButton btnKilepes;
    private javax.swing.JButton btnTorles;
    private javax.swing.JButton btnUjTag;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTagok;
    // End of variables declaration//GEN-END:variables

    public void tablaFrissit() {
        Session session = hibernate.HibernateUtil.getSessionFactory().openSession();
        tagok = session.createQuery("FROM Tag as t WHERE t.id!=0").list();
        session.close();
        
        

        dtm.getDataVector().clear(); //kitörli a sorok tartalmát

        for (Tag t : tagok) {
            Vector sor = new Vector();
            

                sor.add(t.getNev());
                sor.add(t.getEmail());
                sor.add(t.getTelefonszam());

                dtm.addRow(sor);
            
        }
        dtm.fireTableDataChanged();
    }
}
